// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Implements a simple monitor that prints each call as it happens and also keeps statistics.
class CallsMonitor extends Monitor {
	def entries = Vector<(Module, FuncDecl)>.new();
	def counts = Vector<u64>.new();
	var depth = 0; // TODO: trust the depth() of the frame accessor
	var filter: DeclFilter;

	def configure(args: string) -> string {
		filter = DeclFilter.new(args);
		return null;
	}

	def onParse(module: Module) {
		var it = BytecodeIterator.new();
		var callProbe = CallsMonitorEnterProbe.new(this, module);
		var retProbe = CallsMonitorExitProbe.new(this);
		for (i < module.functions.length) {
			var f = module.functions[i];
			if (filter != null && !filter.matches(module, f)) continue;

			if (f.imp != null) continue; // skip imported functions
			var bi = it.reset(f);
			if (bi.current() == Opcode.LOOP) ; // TODO: handle functions that start with a loop
			module.insertProbeAt(f.func_index, bi.pc, callProbe);

			for (v = 0; bi.more(); bi.next()) {
				var op = bi.current();
				match (op) {
					RETURN => ;
					END => if ((bi.pc + 1) < f.cur_bytecode.length) continue;
					_ => continue;
				}
				module.insertProbeAt(f.func_index, bi.pc, retProbe);
			}
		}
	}
	def onExit(code: int) {
		onFinish(null);
	}
	def onFinish(i: Instance) {
	}
}
class CallsMonitorEnterProbe(m: CallsMonitor, module: Module) extends Probe {
	def fire(func: WasmFunction, pc: int, frame: TargetFrame) -> Resumption {
		for (i < m.depth) Trace.OUT.puts("  ");
		m.depth++;
		func.render(Trace.OUT);
		Trace.OUT.outln();
		return Resumption.Continue;
	}
}
class CallsMonitorExitProbe(m: CallsMonitor) extends Probe {
	def fire(func: WasmFunction, pc: int, frame: TargetFrame) -> Resumption {
		m.depth--;
		return Resumption.Continue;
	}
}