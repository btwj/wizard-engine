class BranchInfo {
	var taken: Vector<u64>;
	// for IF and BR_IF, [0] = not taken and [1] = taken

	def init(length: int) {
		taken = Vector.new();
		taken.putn(0, length);
	}
	def render(out: TraceBuilder) {
		out.putc('[');
		for (i < taken.length) {
			out.putd(taken[i]);
			if (i < taken.length - 1) {
				out.puts(", ");
			}
		}
		out.putc(']');
	}
}

class BranchMonitorVisitor(info: BranchInfo) extends BytecodeVisitor {
	def visit_IF(btc: BlockTypeCode) {
		info.init(2);
	}
	def visit_BR_IF(depth: u31) {
		info.init(2);
	}
	def visit_BR_TABLE(labels: Range<u31>) {
		info.init(labels.length);
	}
}

class BranchMonitor extends Monitor {
	def probes = Vector<Probe>.new();
	def entries = Vector<(Module, FuncDecl, int, Opcode)>.new();
	def branches = Vector<BranchInfo>.new();

	def onParse(module: Module) {
		var it = BytecodeIterator.new();
		
		for (i < module.functions.length) {
			var f = module.functions[i];
			if (f.imp != null) continue;
			
			var bi = it.reset(f);
			for (v = 0; bi.more(); bi.next()) {
				var op = bi.current();
				var branchInfo: BranchInfo;

				match (op) {
					IF, BR_IF, BR_TABLE => {
						var branchInfo = BranchInfo.new();
						branches.put(branchInfo);
						entries.put(module, f, bi.pc, op);
						bi.dispatch(BranchMonitorVisitor.new(branchInfo));
						var probe = BranchMonitorProbe.new(this, branchInfo);
						module.insertProbeAt(f.func_index, bi.pc, probe);
					}
					_ => ;
				}
			}
		}
	}
	def onFinish(i: Instance) {
		var prev: FuncDecl;
		for (i < branches.length) {
			var branchInfo = branches[i];
			var e = entries[i];
			if (e.1 != prev) {
				prev = e.1;
				Trace.OUT.put1("func %q:", prev.render(e.0.names, _)).outln();
			}
			Trace.OUT.put1("  +%d ", e.2);
			Opcodes.render(Trace.OUT, e.3.code);
			Trace.OUT.puts(": ");
			branches[i].render(Trace.OUT);
			Trace.OUT.outln();
		}
	}
}

class BranchMonitorProbe(m: BranchMonitor, info: BranchInfo) extends Probe {
	def fire(func: WasmFunction, pc: int, frame: TargetFrame) -> Resumption {
		var accessor = frame.getFrameAccessor();
		var condition = accessor.getOperand(0);
		var taken = Values.v_i(condition) == 0;
		var index = if(taken, 1, 0);
		info.taken[index] += 1;
		return Resumption.Continue;
	}
}