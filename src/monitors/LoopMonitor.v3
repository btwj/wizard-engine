// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Implements a simple monitor that counts the number of iterations of each loop.
class LmEntry(module: Module, func: FuncDecl, depth: int, pc: int) {
	var endPc: int;
}

class LoopMonitor extends Monitor {
	def entries = Vector<LmEntry>.new();
	def counts = Vector<u64>.new();

	def it = BytecodeIterator.new();

	def onParse(m: Module) {
		var mm = ModuleMonitor.new(m);
		mm.forEachFunc(MonitorUtil.isNotImport, monitorFunc(mm, _));
	}
	def onExit(code: int) {
		onFinish(null);
	}
	def onFinish(i: Instance) {
		var prev: FuncDecl;
		for (j < entries.length) {
			var e = entries[j];
			if (e.func != prev) {
				prev = e.func;
				Trace.OUT.put1("func %q:", prev.render(e.module.names, _)).outln();
			}
			for (k < e.depth) Trace.OUT.puts("  ");
			Trace.OUT.put3("  +%d ... +%d loop: %d", e.pc, e.endPc, counts[j]).outln();
		}
	}
	
	private def monitorFunc(mm: ModuleMonitor, func: FuncDecl) {
		var loopDepth = 0;
		var controlStack = ArrayStack<(Opcode, LmEntry)>.new();

		for (bi = it.reset(func); bi.more(); bi.next()) {
			var op = bi.current();
			match (op) {
				BLOCK, IF => controlStack.push((op, null));
				LOOP => {
					var callback = loopHit(_, entries.length);
					mm.beforeInstr(func, bi.pc, callback);
					var lmEntry = LmEntry.new(mm.module, func, loopDepth, bi.pc);
					entries.put(lmEntry);
					controlStack.push((op, lmEntry));
					counts.put(0);
					loopDepth++;
				}
				// TODO: try and exception bytecodes 
				END => {
					if ((bi.pc + 1) < func.cur_bytecode.length) {
						var topControl = controlStack.pop();
						if (topControl.0 == Opcode.LOOP) {
							loopDepth--;
							topControl.1.endPc = bi.pc;
						}
					}
				}
				_ => ;
			}
		}
	}
	private def loopHit(dynamicLoc: DynamicLoc, entry: int) -> Resumption {
		counts[entry] = 1u + counts[entry];
		return Resumption.Continue;
	}
}