// Copyright 2023 Wizard Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

class AfterInstrMonitor extends Monitor {
	def configure(args: string) -> string {
		return null;
	}
	def onParse(module: Module) {
		var mm = ModuleMonitor.new(module);
		mm.forEachFunc(MonitorUtil.isNotImport, probeEveryInstr(mm, _));
	}
	def onExit(code: int) {
		onFinish(null);
	}
	def onFinish(i: Instance) {
	}

	private def probeEveryInstr(mm: ModuleMonitor, func: FuncDecl) {
		var bi = BytecodeIterator.new();

		for (it = bi.reset(func); it.more(); it.next()) {
			it.current();
			mm.afterInstr(func, it.pc, afterInstrFn(func, it.pc, _));
		}
	}
	private def afterInstrFn(beforeFunc: FuncDecl, beforePc: int, loc: DynamicLoc) -> Resumption {
		Trace.OUT.put2("#%d+%d", beforeFunc.func_index, beforePc);
		Trace.OUT.put2("-->#%d+%d", loc.wf.decl.func_index, loc.pc).outln();
		return Resumption.Continue;
	}
}