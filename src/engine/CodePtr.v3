// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// DataReader with additional utility methods for the interpreter.
class CodePtr extends DataReader {
	new(data: Array<byte>) super(data) { }

	def read_opcode() -> Opcode {
		var b = read1();
		return if(Opcodes.attributes[b].PREFIX, Opcodes.find(b, read_uleb32()), Opcodes.opcodes[b]);
	}
	def read_opcode_but_skip_probe(func: FuncDecl) -> Opcode {
		var pc = pos;
		var b = read1();
		if (b == InternalOpcode.PROBE.code) b = func.orig_bytecode[pc];
		return if(Opcodes.attributes[b].PREFIX, Opcodes.find(b, read_uleb32()), Opcodes.opcodes[b]);
	}
	def read_orig_opcode(b: byte) -> Opcode {
		skipN(1);
		return if(Opcodes.attributes[b].PREFIX, Opcodes.find(b, read_uleb32()), Opcodes.opcodes[b]);
	}
	def read_value_codes() -> Array<ValueTypeCode> {
		var count = int.!(read_uleb32()); // value count
		var result = Array<ValueTypeCode>.new(count);
		for (i < count) result[i] = read_value_type_code();
		return result;
	}
	def read_value_type_code() -> ValueTypeCode {
		var code = i8.!(read_sleb32());
		var index = 0;
		if (BpConstants.typeCodeHasIndex(code)) index = read_sleb32();
		return ValueTypeCode(code, index);
	}
	def read_block_type_code() -> BlockTypeCode {
		var code = read_sleb32();
		var index = 0;
		if (BpConstants.typeCodeHasIndex(code)) index = read_sleb32();
		return BlockTypeCode(code, index);
	}
	def read_labels() -> Array<u31> {
		var count = read_uleb32();
		var length = int.!(count + 1);
		var result = Array<u31>.new(length);
		for (i < length) result[i] = read_uleb31();
		return result;
	}
	def iterate_local_codes<T>(f: (u32, ValueTypeCode) -> T) -> int {
		var bcount = int.!(read_uleb32()); // pairs count
		for (i < bcount) {
			var count = read_uleb32();
			var code = i8.!(read_sleb32());
			var index = 0;
			if (BpConstants.typeCodeHasIndex(code)) index = read_sleb32();
			f(count, ValueTypeCode(code, index));
		}
		return bcount;
	}
	def read_MemArg() -> MemArg {
		var flags = read_uleb32();
		var mem_index = u31.!(0u);
		if ((flags & BpConstants.MEMARG_INDEX_FLAG) != 0) {
			mem_index = read_uleb31();
		}
		var offset = read_uleb32();
		return MemArg(byte.view(flags), mem_index, offset);
	}
	def skip_label() {
		skip_leb();
	}
	def skip_value_types() -> int {
		var count = read_uleb32(); // value count
		for (i < count) skip_value_type();
		return int.!(count);
	}
	def skip_local_decls() {
		var count = read_uleb32();
		for (i < count) {
			skip_leb();
			skip_value_type();
		}
	}
	def skip_value_type() {
		skip_block_type();
	}
	def skip_block_type() {
		var code = read_sleb32();
		if (BpConstants.typeCodeHasIndex(code)) skip_leb();
	}
	def read_uleb31() -> u31 {
		return u31.!(read_uleb32());
	}
}
